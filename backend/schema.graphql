### This file was generated by Nexus Schema
### Do not make changes to this file directly


input FloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatNullableFilter
  notIn: [Float!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

type Mutation {
  ChangeRating(data: RatingUpdateInput!): PokemonRating
  CreateRating(data: RatingCreateInput!): PokemonRating
  deleteOnePokemonRating(where: PokemonRatingWhereUniqueInput!): PokemonRating
}

input NestedFloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatNullableFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Pokemon {
  ability1: String
  ability2: String
  ability3: String
  aggregated_rating: Float
  attack: Int!
  defense: Int!
  generation: Int!
  heightMeter: Float
  hp: Int!
  id: Int!
  name: String!
  pokedexNr: Int!
  sp_attack: Int!
  sp_defense: Int!
  species: String!
  speed: Int!
  type1: String!
  type2: String
  weightKg: Float
}

input PokemonOrderByInput {
  ability1: SortOrder
  ability2: SortOrder
  ability3: SortOrder
  attack: SortOrder
  defense: SortOrder
  generation: SortOrder
  heightMeter: SortOrder
  hp: SortOrder
  id: SortOrder
  name: SortOrder
  pokedexNr: SortOrder
  sp_attack: SortOrder
  sp_defense: SortOrder
  species: SortOrder
  speed: SortOrder
  type1: SortOrder
  type2: SortOrder
  weightKg: SortOrder
}

type PokemonRating {
  id: Int!
  pokemonId: Int!
  ratedPokemon: Pokemon
  rating: Float!
  userGuid: String!
}

input PokemonRatingListRelationFilter {
  every: PokemonRatingWhereInput
  none: PokemonRatingWhereInput
  some: PokemonRatingWhereInput
}

input PokemonRatingOrderByInput {
  id: SortOrder
  pokemonId: SortOrder
  rating: SortOrder
  userGuid: SortOrder
}

input PokemonRatingUserGuidPokemonIdCompoundUniqueInput {
  pokemonId: Int!
  userGuid: String!
}

input PokemonRatingWhereInput {
  AND: [PokemonRatingWhereInput!]
  NOT: [PokemonRatingWhereInput!]
  OR: [PokemonRatingWhereInput!]
  id: IntFilter
  pokemonId: IntFilter
  ratedPokemon: PokemonWhereInput
  rating: IntFilter
  userGuid: StringFilter
}

input PokemonRatingWhereUniqueInput {
  id: Int
  userGuid_pokemonId: PokemonRatingUserGuidPokemonIdCompoundUniqueInput
}

input PokemonWhereInput {
  AND: [PokemonWhereInput!]
  NOT: [PokemonWhereInput!]
  OR: [PokemonWhereInput!]
  ability1: StringNullableFilter
  ability2: StringNullableFilter
  ability3: StringNullableFilter
  attack: IntFilter
  defense: IntFilter
  generation: IntFilter
  heightMeter: FloatNullableFilter
  hp: IntFilter
  id: IntFilter
  name: StringFilter
  pokedexNr: IntFilter
  ratings: PokemonRatingListRelationFilter
  sp_attack: IntFilter
  sp_defense: IntFilter
  species: StringFilter
  speed: IntFilter
  type1: StringFilter
  type2: StringNullableFilter
  weightKg: FloatNullableFilter
}

input PokemonWhereUniqueInput {
  id: Int
}

type Query {
  pokemon(where: PokemonWhereUniqueInput!): Pokemon
  pokemonRating(where: PokemonRatingWhereUniqueInput!): PokemonRating
  pokemonratings(after: PokemonRatingWhereUniqueInput, before: PokemonRatingWhereUniqueInput, first: Int, last: Int, orderBy: [PokemonRatingOrderByInput!], where: PokemonRatingWhereInput): [PokemonRating!]!
  pokemons(after: PokemonWhereUniqueInput, before: PokemonWhereUniqueInput, first: Int, last: Int, orderBy: [PokemonOrderByInput!], where: PokemonWhereInput): [Pokemon!]!
}

input RatingCreateInput {
  pokemonId: Int!
  rating: Int!
  userGuid: String!
}

input RatingUpdateInput {
  newRating: Int!
  ratingToUpdate: RatingWhereInputGuidId!
}

input RatingWhereInputGuidId {
  pokemonId: Int!
  userGuid: String!
}

enum SortOrder {
  asc
  desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}
